priority -50

snippet pry "binding.pry"
require 'pry'; binding.pry
endsnippet

snippet "\bb(lock)?" " { |..| .. } block" r
{ |${1:item}| ${2:p item} }
endsnippet

snippet "\bB(lock)?" "{ .. } block" r
{ $0 }
endsnippet

snippet let "let binding rspec"
let(:${1}) { $0 }
endsnippet

snippet : "key: value"
${1:key}: ${2:"value"}
endsnippet

snippet "\b(de)?f" "def <name>..." r
def ${1:function_name}${2:(${3:*args})}
	$0
end
endsnippet

snippet defi "def initialize ..."
def initialize${1:(${2:*args})}
	$0
end
endsnippet

snippet defr "def <name> ... rescue ..."
def ${1:function_name}${2:(${3:*args})}
	$4
rescue
	$0
end
endsnippet

snippet do "do |<key>| ... end" i
do |${1:args}|
	$0
end
endsnippet

snippet Do "do ... end" i
do
	$0
end
endsnippet

snippet "\b(r|attr)" "attr_reader :<attr_names>" r
attr_reader :${0:attr_names}
endsnippet

snippet "\b(w|attr)" "attr_writer :<attr_names>" r
attr_writer :${0:attr_names}
endsnippet

snippet "\b(rw|attr)" "attr_accessor :<attr_names>" r
attr_accessor :${0:attr_names}
endsnippet

snippet rescue
rescue StandardError => e
	${0:# Rescue}
endsnippet

snippet "\b(case|sw(itch)?)" "case <variable> when <expression> ... end" r
case ${1:variable}
when ${2:expression}
$0
end
endsnippet

snippet class "class <class_name> def initialize ... end end"
class ${1:class_name}
	def initialize(${2:*args})
		$0
	end
end
endsnippet

snippet module "module"
module ${1:module_name}
	$0
end
endsnippet

# vim: set ts=2 sw=2 expandtab:
